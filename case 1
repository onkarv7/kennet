High-Level Design (HLD) The system needs to manage patients, doctors, clinics, and appointments while supporting the following requirements: Entities: Patients, Doctors, Clinics, Appointments, and Time Slots. Relationships: A Doctor can work in multiple Clinics, and a Clinic can have multiple Doctors (Many-to-Many). A Patient can book multiple Appointments (One-to-Many). An Appointment is tied to one Doctor, one Clinic, and one Time Slot (One-to-One for each). Key Features: Query available doctors at a clinic for a given time slot. Book an appointment with a specific doctor at a specific clinic and time slot. Track all appointments for a patient across clinics and doctors. HLD Components Database: Relational database (e.g., PostgreSQL, MySQL) to handle structured data and relationships. Tables: Patients: Stores patient information. Doctors: Stores doctor information. Clinics: Stores clinic information. Doctor_Clinics: Junction table for the many-to-many relationship between Doctors and Clinics. Appointments: Stores appointment details (links Patient, Doctor, Clinic, and Time Slot). Time_Slots: Stores available time slots for scheduling. Low-Level Design (LLD) Now, let’s define the detailed schema with tables, columns, primary keys (PK), foreign keys (FK), and relationships. 1. Patients Table Stores patient details. Columns: patient_id (PK, Integer): Unique identifier for each patient. first_name (Varchar): Patient’s first name. last_name (Varchar): Patient’s last name. phone (Varchar): Contact number. email (Varchar): Email address (optional). 2. Doctors Table Stores doctor details. Columns: doctor_id (PK, Integer): Unique identifier for each doctor. first_name (Varchar): Doctor’s first name. last_name (Varchar): Doctor’s last name. specialty (Varchar): Doctor’s medical specialty (e.g., "Cardiology"). 3. Clinics Table Stores clinic details. Columns: clinic_id (PK, Integer): Unique identifier for each clinic. name (Varchar): Clinic name. address (Varchar): Clinic location. phone (Varchar): Clinic contact number. 4. Doctor_Clinics Table (Junction Table) Links doctors to the clinics they work at (handles the many-to-many relationship). Columns: doctor_id (FK, Integer): References Doctors(doctor_id). clinic_id (FK, Integer): References Clinics(clinic_id). Primary Key: Composite key (doctor_id, clinic_id). 5. Time_Slots Table Stores available time slots for appointments (could be clinic-specific or global, depending on implementation). Columns: slot_id (PK, Integer): Unique identifier for each time slot. start_time (DateTime): Start time of the slot (e.g., "2025-04-03 10:00:00"). end_time (DateTime): End time of the slot (e.g., "2025-04-03 10:30:00"). clinic_id (FK, Integer): References Clinics(clinic_id) (optional, if slots are clinic-specific). 6. Appointments Table Stores booked appointments, linking patients, doctors, clinics, and time slots. Columns: appointment_id (PK, Integer): Unique identifier for each appointment. patient_id (FK, Integer): References Patients(patient_id). doctor_id (FK, Integer): References Doctors(doctor_id). clinic_id (FK, Integer): References Clinics(clinic_id). slot_id (FK, Integer): References Time_Slots(slot_id). status (Varchar): Appointment status (e.g., "Scheduled", "Completed", "Cancelled"). created_at (DateTime): Timestamp of booking. Relationships Patients → Appointments: One-to-Many (one patient can have multiple appointments). Doctors → Appointments: One-to-Many (one doctor can have multiple appointments). Clinics → Appointments: One-to-Many (one clinic can host multiple appointments). Time_Slots → Appointments: One-to-One (one time slot can only be booked for one appointment). Doctors ↔ Clinics: Many-to-Many (via Doctor_Clinics table). How It Works Booking with a Specific Doctor: Query Doctor_Clinics to find clinics where the doctor works. Query Appointments and Time_Slots to find available time slots for that doctor at those clinics. Insert a new row into Appointments with the selected doctor_id, clinic_id, slot_id, and patient_id. Booking at a Clinic with Any Available Doctor: Query Doctor_Clinics to get all doctors for the specified clinic_id. Query Appointments to find which doctors are free during the requested time slot. Assign an available doctor and insert the appointment into Appointments. Multiple Appointments for a Patient: The Appointments table allows multiple rows with the same patient_id, linking to different doctor_id, clinic_id, and slot_id. Sample SQL Queries Find Available Doctors at a Clinic for a Time Slot: sql Collapse Wrap Copy SELECT d.doctor_id, d.first_name, d.last_name FROM Doctors d JOIN Doctor_Clinics dc ON d.doctor_id = dc.doctor_id WHERE dc.clinic_id = 1 AND d.doctor_id NOT IN ( SELECT doctor_id FROM Appointments WHERE slot_id = 5 AND status = 'Scheduled' ); Book an Appointment: sql Collapse Wrap Copy INSERT INTO Appointments (patient_id, doctor_id, clinic_id, slot_id, status, created_at) VALUES (1, 2, 1, 5, 'Scheduled', '2025-04-02 12:00:00'); Draw.io Representation To create the ERD in draw.io: Entities: Draw rectangles for Patients, Doctors, Clinics, Doctor_Clinics, Time_Slots, and Appointments. Attributes: List columns inside each rectangle (e.g., patient_id, first_name for Patients). Relationships: Draw a diamond or line between Doctors and Clinics with Doctor_Clinics as the junction table. Connect Appointments to Patients, Doctors, Clinics, and Time_Slots with lines labeled with FKs. Cardinality: Mark 1:N (e.g., Patients to Appointments) and M:N (e.g., Doctors to Clinics).
